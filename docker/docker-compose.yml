x-common-lambda: &common-lambda
  image: public.ecr.aws/lambda/python:3.11
  volumes:
    - ../src:/var/task
  restart: unless-stopped
  environment:
    AWS_DEFAULT_REGION: ap-northeast-1
    AWS_ACCESS_KEY_ID: dummy
    AWS_SECRET_ACCESS_KEY: dummy
    DYNAMODB_ENDPOINT_URL: http://dynamodb-local:8000

services:
  raptor-logger-api:
    <<: *common-lambda
    ports:
      - "9001:8080"
    command: ["RaptorLoggerLambda.lambda_function.lambda_handler"]

  dynamodb-local:
    image: amazon/dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - ../dynamodb_data:/home/dynamodblocal/data
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"

  dynamodb-init:
    image: amazon/aws-cli
    depends_on:
      - dynamodb-local
    entrypoint: >
      sh -c "sleep 2 && aws dynamodb create-table --table-name RaptorDB --attribute-definitions AttributeName=logId,AttributeType=S --key-schema AttributeName=logId,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 --endpoint-url http://dynamodb-local:8000 --region ap-northeast-1 || echo 'Table already exists or failed'"
    restart: "no"

  deployer:
    image: amazon/aws-cli
    volumes:
      - ../src:/app/src
      - ../deploy/deploy.bash:/app/deploy.bash:ro
    working_dir: /app
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_PAGER: ""
    entrypoint: ["bash"]
    stdin_open: true
    tty: true
